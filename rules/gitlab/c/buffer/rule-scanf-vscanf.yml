# yamllint disable
# The ruleset is generated from flawfinder official rule repository hosted on github.
# License: GPL 2.0 (c) 1989, 1991 Free Software Foundation, Inc.
# source: https://github.com/david-a-wheeler/flawfinder/blob/e0d8827c3b714a883ce8036edc832721f4619524/flawfinder.py
# yamllint enable
---
rules:
- id: "c_buffer_rule-scanf-vscanf"
  languages:
  - "c"
  message: |
    Format specifiers can take optional field widths, which should be
    used to limit how many characters are copied into the target buffer.

    For more information please see: https://linux.die.net/man/3/scanf

    Example:
    ```
      char buf[11] = {0};
      scanf("%10s", &buf); // buf = AAAAAAAAAA\0
    ```

    If developing for C Runtime Library (CRT), more secure versions of these functions should be
    used, see:
    https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/scanf-s-scanf-s-l-wscanf-s-wscanf-s-l?view=msvc-170
  metadata:
    shortDescription: "scanf() functions may allow format string based overflows"
    cwe: "CWE-120"
    owasp: "A1:2017-Injection"
  pattern-either:
  - patterns:
    - pattern: "scanf($FMT, ...)"
    - pattern-not: "scanf(\"...\", ...)"
  - patterns:
    - pattern: "vscanf($FMT, ...)"
    - pattern-not: "vscanf(\"...\", ...)"
  - patterns:
    - pattern: "wscanf($FMT, ...)"
    - pattern-not: "wscanf(\"...\", ...)"
  - patterns:
    - pattern: "_tscanf($FMT, ...)"
    - pattern-not: "_tscanf(_T(\"...\"), ...)"
  - patterns:
    - pattern: "vwscanf(FMT, ...)"
    - pattern-not: "vwscanf(\"...\", ...)"
  severity: "ERROR"
