# yamllint disable
# License: MIT (c) GitLab Inc.
# yamllint enable
---
rules:
- id: "python_crypto_rule-crypto-encrypt-dsa-rsa"
  languages:
  - "python"
  message: |
    The application is generating an RSA key that is less than the recommended 2048 bits.
    The National Institute of Standards and Technology (NIST) deprecated signing Digital
    Certificates that contained RSA Public Keys of 1024 bits in December 2010. While
    1024-bit RSA keys have not been factored yet, advances in compute may make it possible
    in the near future.

    Consider upgrading to the newer asymmetric algorithm such as `X25519` which handles
    the complexities of generating key pairs and choosing correct key sizes for you:
    ```
    from cryptography.hazmat.primitives.asymmetric.x25519 import X25519PrivateKey

    # Generate a private key for use in the exchange.
    private_key = X25519PrivateKey.generate()
    # Work with private key/exchange with a peer's
    # public key to created a shared and derived key
    # ...
    ```

    Otherwise use a key size greater than 2048 when generating RSA keys:
    ```
    from cryptography.hazmat.primitives.asymmetric import rsa
    # Generate a private key of 4096 bits
    private_key = rsa.generate_private_key(
        # do not change the exponent value from 65537
        public_exponent=65537,
        key_size=4096,
    )
    # Work with the private key to sign/encrypt data
    # ...
    ```

    For more information on using the cryptography module see:
    - https://cryptography.io/en/latest
  metadata:
    cwe: "CWE-326"
    owasp: "A3:2017-Sensitive Data Exposure"
    category: "security"
    shortDescription: "Inadequate encryption strength"
  patterns:
  - pattern-either:
    - pattern: |
        cryptography.hazmat.primitives.asymmetric.rsa.generate_private_key(...,key_size=$SIZE,...)
    - pattern: |
        cryptography.hazmat.primitives.asymmetric.rsa.generate_private_key($EXP, $SIZE,...)
    - pattern: |
        cryptography.hazmat.primitives.asymmetric.rsa.generate_private_key($SIZE, ...)
    - pattern: |
        cryptography.hazmat.primitives.asymmetric.dsa.generate_private_key(...,key_size=$SIZE,...)
    - pattern: |
        cryptography.hazmat.primitives.asymmetric.dsa.generate_private_key($EXP, $SIZE, ...)
    - pattern: "cryptography.hazmat.primitives.asymmetric.dsa.generate_private_key($SIZE,...)"
    - pattern: "Crypto.PublicKey.RSA.generate($SIZE, ...)"
    - pattern: "Crypto.PublicKey.DSA.generate($SIZE, ...)"
    - pattern: "Cryptodome.PublicKey.DSA.generate($SIZE, ...)"
    - pattern: "Cryptodome.PublicKey.RSA.generate($SIZE, ...)"
    - pattern: "Crypto.PublicKey.DSA.generate(bits=$SIZE, ...)"
    - pattern: "Cryptodome.PublicKey.DSA.generate(bits=$SIZE, ...)"
    - pattern: "pycrypto_rsa.generate(bits=$SIZE, ...)"
    - pattern: "pycrypto_dsa.generate(bits=$SIZE, ...)"
    - pattern: "pycryptodomex_rsa.generate(bits=$SIZE, ...)"
    - pattern: "pycryptodomex_rsa.generate($SIZE, ...)"
    - pattern: "pycryptodomex_dsa.generate(bits=$SIZE, ...)"
    - pattern: "pycryptodomex_dsa.generate($SIZE, ...)"
  - metavariable-comparison:
      comparison: "$SIZE < 2048"
      metavariable: "$SIZE"
  severity: "ERROR"
