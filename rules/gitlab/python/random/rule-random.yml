# yamllint disable
# License: MIT (c) GitLab Inc.
# yamllint enable
---
rules:
- id: "python_random_rule-random"
  languages:
  - "python"
  message: |
    Depending on the context, generating weak random numbers may expose cryptographic functions,
    which rely on these numbers, to be exploitable. When generating numbers for sensitive values
    such as tokens, nonces, and cryptographic keys, it is recommended that the `secrets` module
    be used instead.

    Example using the secrets module:
    ```
    import secrets

    # Generate a secure random 64 byte array
    random_bytes = secrets.token_bytes(64)
    print(random_bytes)

    # Generate a secure random 64 byte array as a hex string
    random_bytes_hex = secrets.token_hex(64)

    # Generate a secure random 64 byte array base64 encoded for use in URLs
    random_string = secrets.token_urlsafe(64)
    ```

    For more information on the `secrets` module see:
    - https://docs.python.org/3/library/secrets.html
  metadata:
    cwe: "CWE-330"
    owasp: "A3:2017-Sensitive Data Exposure"
    category: "security"
    shortDescription: "Use of insufficiently random values"
  pattern-either:
  - pattern: "random.random(...)"
  - pattern: "random.randrange(...)"
  - pattern: "random.randint(...)"
  - pattern: "random.choice(...)"
  - pattern: "random.uniform(...)"
  - pattern: "random.triangular(...)"
  severity: "INFO"
