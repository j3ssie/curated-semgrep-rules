# yamllint disable
# License: MIT (c) GitLab Inc.
# yamllint enable
---
rules:
- id: "scala_inject_rule-CLRFInjectionLogs"
  languages:
  - "scala"
  message: |
    When data from an untrusted source is put into a logger and not neutralized correctly, an
    attacker could forge log entries or include malicious content. Inserted false entries could be
    used to skew statistics, distract the administrator or even to implicate another party in the
    commission of a malicious act. If the log file is processed automatically, the attacker can
    render the file unusable by corrupting the format of the file or injecting unexpected
    characters. An attacker may also inject code or other commands into the log file and take
    advantage of a vulnerability in the log processing utility (e.g. command injection or XSS).
  metadata:
    category: "security"
    cwe: "CWE-93"
    shortDescription: "Improper Neutralization of CRLF Sequences ('CRLF Injection')"
    technology:
    - "scala"
  mode: "taint"
  pattern-sanitizers:
  - patterns:
    - pattern-inside: |-
        $STR.replaceAll("$REPLACE_CHAR", "$REPLACE");
    - pattern: "$STR"
    - metavariable-regex:
        metavariable: "$REPLACE_CHAR"
        regex: "(.*\\\\r\\\\n.*)"
    - metavariable-regex:
        metavariable: "$REPLACE"
        regex: "(?!(\\\\r\\\\n))"
  - pattern: "org.owasp.encoder.Encode.forUriComponent(...)"
  - pattern: "org.owasp.encoder.Encode.forUri(...)"
  - pattern: "java.net.URLEncoder.encode(..., $CHARSET)"
  pattern-sinks:
  - patterns:
    - patterns:
      - pattern: "$LOGGER.$METHOD(...,<...$TAINTED...>,...)"
      - focus-metavariable: "$TAINTED"
    - metavariable-regex:
        metavariable: "$METHOD"
        regex: "(log|logp|logrb|entering|exiting|fine|finer|finest|info|debug|trace|warn|warning|config|error|severe)"
    - metavariable-pattern:
        metavariable: "$LOGGER"
        pattern-either:
        - pattern: "Logger"
        - pattern: "log"
        - pattern: "logger"
        - pattern: "org.pmw.tinylog.Logger"
        - pattern: "org.apache.log4j.Logger"
        - pattern: "org.apache.logging.log4j.Logger"
        - pattern: "org.slf4j.Logger"
        - pattern: "org.apache.commons.logging.Log"
        - pattern: "java.util.logging.Logger"
  pattern-sources:
  - patterns:
    - pattern-inside: |
        def $FUNC(..., $REQ: HttpServletRequest, ...) : $TYPE = {
          ...
        }
    - pattern: "$REQ.getParameter(...)"
  severity: "ERROR"
