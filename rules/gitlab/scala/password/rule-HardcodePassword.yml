# yamllint disable
# License: MIT (c) GitLab Inc.
# yamllint enable
---
rules:
- id: "scala_password_rule-HardcodePassword"
  languages:
  - "scala"
  message: |
    Passwords should not be kept in the source code. The source code can be widely shared in an
    enterprise environment, and is certainly shared in open source. To be managed safely, passwords
    and secret keys should be stored in separate configuration files or keystores.
  metadata:
    category: "security"
    cwe: "CWE-259"
    shortDescription: "Use of Hard-coded Password"
    technology:
    - "scala"
  patterns:
  - pattern-either:
    - pattern-inside: |
        val $PWD = "..."
        ...
    - pattern-inside: |
        val $PWD = Array[Byte](...)
        ...
    - pattern-inside: |
        val $PWD = Array(...)
        ...
    - pattern-inside: |
        val $PWD = new String(...)
        ...
    - pattern-inside: |
        val $PWD: String = ...
        ...
    - pattern-inside: |
        val $PWD: Char = ...
        ...
    - pattern-inside: |
        val $PWD = $VAR.toCharArray
        ...
    - pattern-inside: |
        object $CLAZZ {
            val $PWD = ...
            ...
        }
    - pattern-inside: |
        class $CLAZZ {
            val $PWD = ...
            ...
        }
    - pattern-inside: |
        $S = new SymmetricEncryptionConfig(...)
        ...
  - pattern-either:
    - pattern: "($KS: java.security.KeyStore).load(..., \"...\")"
    - pattern: "($KS: java.security.KeyStore).load(..., \"...\".$FOO(...))"
    - pattern: "($KS: java.security.KeyStore).load(..., $PWD)"
    - pattern: "($KS: java.security.KeyStore).load(..., $PWD.$FOO(...))"
    - pattern: "KeyManagerFactory.getInstance(...).init(..., $PWD)"
    - pattern: "KeyManagerFactory.getInstance(...).init(..., $PWD.$FOO(...))"
    - pattern: "KeyManagerFactory.getInstance(...).init(..., \"...\")"
    - pattern: "KeyManagerFactory.getInstance(...).init(..., \"...\".$FOO(...))"
    - pattern: "($KS: java.security.KeyStore).getInstance(...).load(..., \"...\")"
    - pattern: "($KS: java.security.KeyStore).getInstance(...).load(..., \"...\".$FOO(...))"
    - pattern: "($KS: java.security.KeyStore).getInstance(...).load(..., $PWD)"
    - pattern: "($KS: java.security.KeyStore).getInstance(...).load(..., $PWD.$FOO(...))"
    - pattern: "KeyStore.getInstance(...).load(..., \"...\")"
    - pattern: "KeyStore.getInstance(...).load(..., \"...\".$FOO(...))"
    - pattern: "KeyStore.getInstance(...).load(..., $PWD)"
    - pattern: "KeyStore.getInstance(...).load(..., $PWD.$FOO(...))"
    - pattern: "new PBEKeySpec(\"...\", ...)"
    - pattern: "new PBEKeySpec(\"...\".$FOO(...), ...)"
    - pattern: "new PBEKeySpec($PWD, ...)"
    - pattern: "new PBEKeySpec($PWD.$FOO(...), ...)"
    - pattern: "new PasswordAuthentication(\"...\", \"...\")"
    - pattern: "new PasswordAuthentication(\"...\", \"...\".$FOO(...))"
    - pattern: "new PasswordAuthentication(\"...\", $PWD)"
    - pattern: "new PasswordAuthentication(\"...\", $PWD.$FOO(...))"
    - pattern: "($CB: PasswordCallback).setPassword(\"...\")"
    - pattern: "($CB: PasswordCallback).setPassword(\"...\".$FOO(...))"
    - pattern: "($CB: PasswordCallback).setPassword($PWD)"
    - pattern: "($CB: PasswordCallback).setPassword($PWD.$FOO(...))"
    - pattern: "new KeyStore.PasswordProtection(\"...\")"
    - pattern: "new KeyStore.PasswordProtection(\"...\".$FOO(...))"
    - pattern: "new KeyStore.PasswordProtection($PWD)"
    - pattern: "new KeyStore.PasswordProtection($PWD.$FOO(...))"
    - pattern: "new KerberosKey(...,\"...\",...)"
    - pattern: "new KerberosKey(...,\"...\".$FOO(...),...)"
    - pattern: "new KerberosKey(...,$PWD,...)"
    - pattern: "new KerberosKey(...,$PWD.$FOO(...),...)"
    - pattern: "($KMF: javax.net.ssl.KeyManagerFactory).init(..., $PWD)"
    - pattern: "($KMF: javax.net.ssl.KeyManagerFactory).init(..., \"...\")"
    - pattern: "($KMF: javax.net.ssl.KeyManagerFactory).init(..., \"...\".$FOO(...))"
    - pattern: "($KMF: javax.net.ssl.KeyManagerFactory).init(..., $PWD.$FOO(...))"
    - pattern: "($DM: java.sql.DriverManager).getConnection(..., \"...\")"
    - pattern: "($DM: java.sql.DriverManager).getConnection(..., \"...\".$FOO(...))"
    - pattern: "($DM: java.sql.DriverManager).getConnection(..., $PWD)"
    - pattern: "($DM: java.sql.DriverManager).getConnection(..., $PWD.$FOO(...))"
    - pattern: "($KMF: javax.net.ssl.KeyManagerFactory).init(..., \"...\")"
    - pattern: "($KMF: javax.net.ssl.KeyManagerFactory).init(..., \"...\".$FOO(...))"
    - pattern: "($KMF: javax.net.ssl.KeyManagerFactory).init(..., $PWD)"
    - pattern: "($KMF: javax.net.ssl.KeyManagerFactory).init(..., $PWD.$FOO(...))"
    - pattern: "io.vertx.ext.web.handler.CSRFHandler.create(..., \"...\")"
    - pattern: "io.vertx.ext.web.handler.CSRFHandler.create(..., \"...\".$FOO(...))"
    - pattern: "io.vertx.ext.web.handler.CSRFHandler.create(..., $PWD)"
    - pattern: "io.vertx.ext.web.handler.CSRFHandler.create(..., $PWD.$FOO(...))"
    - pattern: "$S.setPassword($PWD)"
    - pattern: "$S.setPassword($PWD.$FOO(...))"
    - pattern: "$S.setPassword(\"...\")"
  - metavariable-regex:
      metavariable: "$PWD"
      regex: "(?i).*(pass|pwd|psw|secret|key|cipher|crypt|des|aes|mac|private|sign|cert).*"
  severity: "ERROR"
