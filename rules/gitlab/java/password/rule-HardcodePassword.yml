# yamllint disable
# License: MIT (c) GitLab Inc.
# yamllint enable
---
rules:
- id: "java_password_rule-HardcodePassword"
  languages:
  - "java"
  patterns:
  - pattern-either:
    - pattern-inside: |
        char[] $PWD = ...;
        ...
    - pattern-inside: |
        String $PWD = ...;
        ...
    - pattern-inside: |
        public class $CLAZZ {
        final char[] $PWD = ...;
          ...
        }
    - pattern-inside: |
        public class $CLAZZ {
        final String $PWD = ...;
          ...
        }
    - pattern-inside: |
        $S = new SymmetricEncryptionConfig(...);
        ...
  - pattern-either:
    - pattern: "(java.security.KeyStore $KS).load(..., \"...\")"
    - pattern: "(java.security.KeyStore $KS).load(..., \"...\".$FOO(...))"
    - pattern: "(java.security.KeyStore $KS).load(..., $PWD)"
    - pattern: "(java.security.KeyStore $KS).load(..., $PWD.$FOO(...))"
    - pattern: "KeyManagerFactory.getInstance(...).init(..., $PWD);"
    - pattern: "KeyManagerFactory.getInstance(...).init(..., $PWD.$FOO(...));"
    - pattern: "KeyManagerFactory.getInstance(...).init(..., \"...\");"
    - pattern: "KeyManagerFactory.getInstance(...).init(..., \"...\".$FOO(...));"
    - pattern: "(java.security.KeyStore $KS).getInstance(...).load(..., \"...\")"
    - pattern: "(java.security.KeyStore $KS).getInstance(...).load(..., \"...\".$FOO(...))"
    - pattern: "(java.security.KeyStore $KS).getInstance(...).load(..., $PWD)"
    - pattern: "(java.security.KeyStore $KS).getInstance(...).load(..., $PWD.$FOO(...))"
    - pattern: "KeyStore.getInstance(...).load(..., \"...\");"
    - pattern: "KeyStore.getInstance(...).load(..., \"...\".$FOO(...));"
    - pattern: "KeyStore.getInstance(...).load(..., $PWD);"
    - pattern: "KeyStore.getInstance(...).load(..., $PWD.$FOO(...));"
    - pattern: "new PBEKeySpec(\"...\", ...)"
    - pattern: "new PBEKeySpec(\"...\".$FOO(...), ...)"
    - pattern: "new PBEKeySpec($PWD, ...)"
    - pattern: "new PBEKeySpec($PWD.$FOO(...), ...)"
    - pattern: "new PasswordAuthentication(\"...\", \"...\")"
    - pattern: "new PasswordAuthentication(\"...\", \"...\".$FOO(...))"
    - pattern: "new PasswordAuthentication(\"...\", $PWD)"
    - pattern: "new PasswordAuthentication(\"...\", $PWD.$FOO(...))"
    - pattern: "(PasswordCallback $CB).setPassword(\"...\")"
    - pattern: "(PasswordCallback $CB).setPassword(\"...\".$FOO(...))"
    - pattern: "(PasswordCallback $CB).setPassword($PWD)"
    - pattern: "(PasswordCallback $CB).setPassword($PWD.$FOO(...))"
    - pattern: "new KeyStore.PasswordProtection(\"...\")"
    - pattern: "new KeyStore.PasswordProtection(\"...\".$FOO(...))"
    - pattern: "new KeyStore.PasswordProtection($PWD)"
    - pattern: "new KeyStore.PasswordProtection($PWD.$FOO(...))"
    - pattern: "new KerberosKey(...,\"...\",...);"
    - pattern: "new KerberosKey(...,\"...\".$FOO(...),...);"
    - pattern: "new KerberosKey(...,$PWD,...);"
    - pattern: "new KerberosKey(...,$PWD.$FOO(...),...);"
    - pattern: "(javax.net.ssl.KeyManagerFactory $KMF).init(..., $PWD);"
    - pattern: "(javax.net.ssl.KeyManagerFactory $KMF).init(..., \"...\");"
    - pattern: "(javax.net.ssl.KeyManagerFactory $KMF).init(..., \"...\".$FOO(...));"
    - pattern: "(javax.net.ssl.KeyManagerFactory $KMF).init(..., $PWD.$FOO(...));"
    - pattern: "(java.sql.DriverManager).getConnection(..., \"...\");"
    - pattern: "(java.sql.DriverManager).getConnection(..., \"...\".$FOO(...));"
    - pattern: "(java.sql.DriverManager).getConnection(..., $PWD);"
    - pattern: "(java.sql.DriverManager).getConnection(..., $PWD.$FOO(...));"
    - pattern: "(javax.net.ssl.KeyManagerFactory $KMF).init(..., \"...\");"
    - pattern: "(javax.net.ssl.KeyManagerFactory $KMF).init(..., \"...\".$FOO(...));"
    - pattern: "(javax.net.ssl.KeyManagerFactory $KMF).init(..., $PWD);"
    - pattern: "(javax.net.ssl.KeyManagerFactory $KMF).init(..., $PWD.$FOO(...));"
    - pattern: "io.vertx.ext.web.handler.CSRFHandler.create(..., \"...\");"
    - pattern: "io.vertx.ext.web.handler.CSRFHandler.create(..., \"...\".$FOO(...));"
    - pattern: "io.vertx.ext.web.handler.CSRFHandler.create(..., $PWD);"
    - pattern: "io.vertx.ext.web.handler.CSRFHandler.create(..., $PWD.$FOO(...));"
    - pattern: "$S.setPassword($PWD);"
    - pattern: "$S.setPassword($PWD.$FOO(...));"
    - pattern: "$S.setPassword(\"...\");"
  - metavariable-regex:
      metavariable: "$PWD"
      regex: "(?i).*(pass|pwd|psw|secret|key|cipher|crypt|des|aes|mac|private|sign|cert).*"
  message: |
    A potential hard-coded password was identified in a hard-coded string.
    Passwords should not be stored directly in code
    but loaded from secure locations such as a Key Management System (KMS).

    The purpose of using a Key Management System is so access can be audited and keys easily
    rotated
    in the event of a breach. By hardcoding passwords, it will be extremely difficult to determine
    when or if, a key is compromised.

    The recommendation on which KMS to use depends on the environment the application is running
    in:

    - For Google Cloud Platform consider [Cloud Key Management](https://cloud.google.com/kms/docs)
    - For Amazon Web Services consider [AWS Key Management](https://aws.amazon.com/kms/)
    - For on premise or other alternatives to cloud providers, consider [Hashicorp's
    Vault](https://www.vaultproject.io/)
    - For other cloud providers, please see their documentation
  severity: "ERROR"
  metadata:
    shortDescription: "Use of hard-coded password"
    category: "security"
    cwe: "CWE-259"
    technology:
    - "java"
