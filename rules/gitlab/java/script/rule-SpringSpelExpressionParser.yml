# yamllint disable
# License: MIT (c) GitLab Inc.
# yamllint enable
---
rules:
- id: "java_script_rule-SpringSpelExpressionParser"
  languages:
  - "java"
  patterns:
  - pattern: "($PARSER $P).$METHOD($ARG);"
  - pattern-not: "($PARSER $P).$METHOD(\"...\");"
  - metavariable-pattern:
      metavariable: "$PARSER"
      pattern-either:
      - pattern: "org.springframework.expression.spel.standard.SpelExpressionParser"
      - pattern: "org.springframework.expression.ExpressionParser"
  - metavariable-regex:
      metavariable: "$METHOD"
      regex: "(parseExpression|parseRaw)"
  message: |
    The application was found calling SpringFramework's `SpelExpressionParser.parseExpression`.
    Calling this method directly with user-supplied input may allow an adversary to
    execute arbitrary Java code including OS system commands.

    Never call `parseExpression` or `parseRaw` directly with user-supplied input. Consider
    alternate
    methods such as a lookup table to take user input and resolve hardcoded values.

    Later versions of SpringFramework introduced a `SimpleEvaluationContext` which can be
    used to access bound data when calling the `getValue` result of `parseExpression`. This
    `SimpleEvaluationContext` has a reduced set of functionality and can restrict data binding
    to read-only or read-write contexts. An adversary could still access public properties
    or fields on custom types that have been provided to the evaluation context. Use with caution.

    Example using `SimpleEvaluationContext` with a read-write data binding context:
    ```
    @RequestMapping(value="/spel", method=RequestMethod.POST)
    public String spel(@Validated User user, Model model)  {
      // Create the Expression Parser
      SpelExpressionParser parser = new SpelExpressionParser();
      // Parse the expression
      Expression parsedExpression = parser.parseExpression(model.getPossiblyUnsafeData());
      // Create the read-write data binding context
      SimpleEvaluationContext context = SimpleEvaluationContext.forReadWriteDataBinding().build();
      // Execute the expression, passing in the read-write context
      Object result = parsedExpression.getValue(context);
      // work with the result
      // ...
      return "user";
    }
    ```

    For more information on SimpleEvaluationContext see:
    https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/expression/spel/support/SimpleEvaluationContext.html
  severity: "ERROR"
  metadata:
    shortDescription: "Improper neutralization of special elements used in an expression
      language statement ('Expression Language Injection')"
    category: "security"
    cwe: "CWE-917"
