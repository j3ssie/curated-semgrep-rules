# yamllint disable
# License: MIT (c) GitLab Inc.
# yamllint enable
---
rules:
- id: "java_xpathi_rule-XpathInjection"
  languages:
  - "java"
  message: |
    The application processes `XPath` queries with potentially malicious input.
    An adversary who is able to control the XPath query could potentially influence the logic
    of how data is retrieved, processed or even bypass protections.

    To protect against XPath injection, user input should be parameterized using a variable
    resolver.
    By creating a class that implements the `XPathVariableResolver` the application can ensure
    that
    the xpath query and user-supplied input are treated separately.

    Example implementation of an XPathVariableResolver:
    ```
    // Create a class which implements the XPathVariableResolver interface
    public static class SimpleXPathVariableResolver implements XPathVariableResolver {
      // Use a map or lookup table to store variables for resolution
      private HashMap<QName, String> variables = new HashMap<>();
      // Allow caller to set variables
      public void setVariable(QName name, String value) {
        variables.put(name, value);
      }
      // Implement the resolveVariable to return the value
      @Override
      public Object resolveVariable(QName name) {
        return variables.getOrDefault(name, "");
      }
    }

    public static void xpathQuery(String userInput) throws ParseException,
    ParserConfigurationException,
      SAXException, IOException, XPathExpressionException {

      // Create our DocumentFactory
      DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance();
      // Enable namespace awareness
      domFactory.setNamespaceAware(true);
      // Enable secure processing
      domFactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
      // Create our DocumentBuilder
      DocumentBuilder builder = domFactory.newDocumentBuilder();
      // Parse our XML document
      Document doc = builder.parse("inventory.xml");

      // Create a new instance of an XPath object
      XPath xpathProcessor = XPathFactory.newInstance().newXPath();
      // Create our XPathVariableResolver
      SimpleXPathVariableResolver resolver = new SimpleXPathVariableResolver();
      // Add user input as a variable value
      resolver.setVariable(new QName("author"), userInput);
      // Configure the processor to use our variable resolver
      xpathProcessor.setXPathVariableResolver(resolver);
      // Evaluate the XPath query
          String result = xpathProcessor.compile("//author[contains(., $author)]").evaluate(doc);
      // Work with the result
      // ...
    }
    ```

    For more information on XPath Injection see:
    - https://owasp.org/www-community/attacks/XPATH_Injection
  metadata:
    shortDescription: "Improper neutralization of data within XPath expressions ('XPath
      Injection')"
    category: "security"
    cwe: "CWE-643"
  patterns:
  - pattern-either:
    - pattern-inside: |-
        import javax.xml.xpath.*; ...
    - pattern-inside: |-
        import javax.xml.xpath.XPath; ...
  - pattern-either:
    - patterns:
      - pattern: "(XPath $X).compile($ARG)"
      - pattern-not: "(XPath $X).compile(\"...\")"
    - patterns:
      - pattern: "(XPath $X).evaluate($ARG)"
      - pattern-not: "(XPath $X).evaluate(\"...\")"
  severity: "ERROR"
