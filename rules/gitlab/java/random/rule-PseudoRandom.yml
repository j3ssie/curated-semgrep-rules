# yamllint disable
# License: MIT (c) GitLab Inc.
# yamllint enable
---
rules:
- id: "java_random_rule-PseudoRandom"
  languages:
  - "java"
  patterns:
  - pattern-either:
    - pattern: |
        java.util.Random $R = new java.util.Random();
        ...
        $R.$METHOD();
    - pattern: "(java.util.Random $R).$METHOD()"
    - pattern: "new java.util.Random().$METHOD()"
    - pattern: "org.apache.commons.lang.math.RandomUtils.$METHOD()"
    - pattern: "org.apache.commons.lang.RandomStringUtils.$METHOD(...)"
  - metavariable-regex:
      metavariable: "$METHOD"
      regex: "^(next|random)"
  message: |
    Depending on the context, generating weak random numbers may expose cryptographic functions
    which rely on these numbers, to be exploitable. When generating numbers for sensitive values
    such as tokens, nonces, and cryptographic keys, it is recommended that the `DRBG` instance
    of `SecureRandom` be used.

    Example using `DRBG` with `SecureRandom`:
    ```
    public SecureRandom getSecureRandomDRBG() throws NoSuchAlgorithmException {
    // Use DRBG according to
    http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-90Ar1.pdf
        return SecureRandom.getInstance("DRBG",
                // Security strength in bits (default is 128)
                DrbgParameters.instantiation(256,
                    // Set prediction resistance and re-seeding
                    DrbgParameters.Capability.PR_AND_RESEED,
                    // Set the personalization string (optional, not necessary)
                    "some_personalization_string".getBytes()
                )
        );
    }
    ```

    For more information on Java Cryptography see:
    https://docs.oracle.com/en/java/javase/15/security/java-cryptography-architecture-jca-reference-guide.html
  severity: "WARNING"
  metadata:
    shortDescription: "Use of insufficiently random values"
    category: "security"
    cwe: "CWE-330"
    technology:
    - "java"
